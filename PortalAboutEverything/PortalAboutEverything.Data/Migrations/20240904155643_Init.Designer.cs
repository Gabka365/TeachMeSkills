// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PortalAboutEverything.Data;

#nullable disable

namespace PortalAboutEverything.Data.Migrations
{
    [DbContext(typeof(PortalDbContext))]
    [Migration("20240904155643_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BoardGameUser", b =>
                {
                    b.Property<int>("FavoriteBoardsGamesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersWhoFavoriteThisBoardGameId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteBoardsGamesId", "UsersWhoFavoriteThisBoardGameId");

                    b.HasIndex("UsersWhoFavoriteThisBoardGameId");

                    b.ToTable("BoardGameUser");
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("FavoriteBooksOfUserId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersWhoAddBookToFavoritesId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteBooksOfUserId", "UsersWhoAddBookToFavoritesId");

                    b.HasIndex("UsersWhoAddBookToFavoritesId");

                    b.ToTable("BookUser");
                });

            modelBuilder.Entity("GameStoreUser", b =>
                {
                    b.Property<int>("MyGamesId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTheGameId")
                        .HasColumnType("integer");

                    b.HasKey("MyGamesId", "UserTheGameId");

                    b.HasIndex("UserTheGameId");

                    b.ToTable("GameStoreUser");
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.Property<int>("FavoriteGamesId")
                        .HasColumnType("integer");

                    b.Property<int>("UserWhoFavoriteTheGameId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteGamesId", "UserWhoFavoriteTheGameId");

                    b.HasIndex("UserWhoFavoriteTheGameId");

                    b.ToTable("GameUser");
                });

            modelBuilder.Entity("GoodUser", b =>
                {
                    b.Property<int>("FavouriteGoodsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersWhoLikedTheGoodId")
                        .HasColumnType("integer");

                    b.HasKey("FavouriteGoodsId", "UsersWhoLikedTheGoodId");

                    b.HasIndex("UsersWhoLikedTheGoodId");

                    b.ToTable("GoodUser");
                });

            modelBuilder.Entity("LikeTraveling", b =>
                {
                    b.Property<int>("LikesId")
                        .HasColumnType("integer");

                    b.Property<int>("TravelingsId")
                        .HasColumnType("integer");

                    b.HasKey("LikesId", "TravelingsId");

                    b.HasIndex("TravelingsId");

                    b.ToTable("LikeTraveling");
                });

            modelBuilder.Entity("LikeUser", b =>
                {
                    b.Property<int>("LikesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("LikesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("LikeUser");
                });

            modelBuilder.Entity("MovieUser", b =>
                {
                    b.Property<int>("FavoriteMoviesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersWhoFavoriteTheMovieId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteMoviesId", "UsersWhoFavoriteTheMovieId");

                    b.HasIndex("UsersWhoFavoriteTheMovieId");

                    b.ToTable("MovieUser");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Alerts.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNewBoardGameAlert")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Alerts.AlertUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlertId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("WhenUserSawAlert")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AlertId");

                    b.HasIndex("UserId");

                    b.ToTable("AlertUser");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.BoardGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Essence")
                        .HasColumnType("text");

                    b.Property<string>("MiniTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long>("ProductCode")
                        .HasColumnType("bigint");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BoardGames");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.BoardGameReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("BoardGameReviews");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.BookClub.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BookAuthor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SummaryOfBook")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearOfPublication")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.BookClub.BookReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("BookIllustrationsRating")
                        .HasColumnType("integer");

                    b.Property<int>("BookPrintRating")
                        .HasColumnType("integer");

                    b.Property<int>("BookRating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookReviews");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TravelingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TravelingId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.CommentBlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CurrentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("CommentsBlog");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.GameStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GameStores");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearOfEvent")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HistoryEvents");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Budget")
                        .HasColumnType("integer");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CurrentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DislikeCount")
                        .HasColumnType("integer");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Store.Good", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Store.GoodReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GoodId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserWhoLeavedAReview")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.ToTable("GoodReviews");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Traveling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeOfCreation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Travelings");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Permission")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.VideoLibrary.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.VideoLibrary.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.Property<int>("PostsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("PostsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PostUser");
                });

            modelBuilder.Entity("BoardGameUser", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.BoardGame", null)
                        .WithMany()
                        .HasForeignKey("FavoriteBoardsGamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersWhoFavoriteThisBoardGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.BookClub.Book", null)
                        .WithMany()
                        .HasForeignKey("FavoriteBooksOfUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersWhoAddBookToFavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStoreUser", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.GameStore", null)
                        .WithMany()
                        .HasForeignKey("MyGamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserTheGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Game", null)
                        .WithMany()
                        .HasForeignKey("FavoriteGamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserWhoFavoriteTheGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoodUser", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Store.Good", null)
                        .WithMany()
                        .HasForeignKey("FavouriteGoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersWhoLikedTheGoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LikeTraveling", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Like", null)
                        .WithMany()
                        .HasForeignKey("LikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.Traveling", null)
                        .WithMany()
                        .HasForeignKey("TravelingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LikeUser", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Like", null)
                        .WithMany()
                        .HasForeignKey("LikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieUser", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Movie", null)
                        .WithMany()
                        .HasForeignKey("FavoriteMoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersWhoFavoriteTheMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Alerts.AlertUser", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Alerts.Alert", "Alert")
                        .WithMany("UsersWhoAlreadySawIt")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.User", "User")
                        .WithMany("AlertsWhichISaw")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.BoardGameReview", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Game");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.BookClub.BookReview", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.BookClub.Book", "Book")
                        .WithMany("BookReviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Book");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Comment", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Traveling", "Traveling")
                        .WithMany("Comments")
                        .HasForeignKey("TravelingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Traveling");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.CommentBlog", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Post", "Post")
                        .WithMany("CommentsBlog")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Store.GoodReview", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Store.Good", "Good")
                        .WithMany("Reviews")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Good");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Traveling", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.User", "User")
                        .WithMany("Travelings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.VideoLibrary.Video", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.VideoLibrary.Folder", "Folder")
                        .WithMany("Videos")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.HasOne("PortalAboutEverything.Data.Model.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalAboutEverything.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Alerts.Alert", b =>
                {
                    b.Navigation("UsersWhoAlreadySawIt");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.BookClub.Book", b =>
                {
                    b.Navigation("BookReviews");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Game", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Post", b =>
                {
                    b.Navigation("CommentsBlog");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Store.Good", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.Traveling", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.User", b =>
                {
                    b.Navigation("AlertsWhichISaw");

                    b.Navigation("Travelings");
                });

            modelBuilder.Entity("PortalAboutEverything.Data.Model.VideoLibrary.Folder", b =>
                {
                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
